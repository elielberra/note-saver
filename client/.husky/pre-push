#!/bin/sh

# Define color codes for output formatting
BLUE="\033[1;34m"
RED="\033[1;31m"
GREEN="\033[1;32m"
NC="\033[0m"

ROOT_PROJECT_DIR="${PWD}"
branchName=$(git branch --show-current)
MASTER_BRANCH="master"

commitLogsOfNewBranch=$(git log "${MASTER_BRANCH}".."$branchName")
# If the branch does not have new commits, block the pushs to prevent the PR auto creation from faililing
# If this is the master branch, skip this test
if [ -z "$commitLogsOfNewBranch" ] && [ "$branchName" != "$MASTER_BRANCH" ]; then
    echo "${RED} You must add an initial commit to the branch before performing a push${NC}"
    exit 1
fi

# Check if an upstream branch is set; if so, use it to find modified files, otherwise use HEAD
if git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null >&2; then
    modifiedFiles=$(git diff --name-only @{upstream})  # Get modified files from the upstream branch
else
    modifiedFiles=$(git diff --name-only HEAD)  # Get modified files from the current branch (HEAD)
fi

modifiedApps=""
# Loop through each app (client and server) and check if any files have been modified
for app in "client" "server"; do
    if echo "$modifiedFiles" | grep -q "^${app}/"; then
        modifiedApps="${modifiedApps} ${app}"
    fi
done

# If no apps were modified, exit the script with a success message
if [ -z "$modifiedApps" ]; then
    echo "${GREEN}No changes detected in client/ or server/ since the last push. Exiting${NC}"
    exit 0
fi

# Function to run checks or tests
run_command() {
    local app=$1
    local command=$2
    cd "${ROOT_PROJECT_DIR}/${app}"
    echo "${BLUE}Running ${command} for the ${app}${NC}"
    if ! npm run "${command}"; then
        echo "${RED}The ${command} failed for the ${app}. Please fix the issues in the ${app}${NC}"
        exit 1
    fi
    echo "${GREEN}The \`npm run ${command}\` command ran successfully for the ${app}${NC}"
}

# Loop through each modified app and run checks
for app in $modifiedApps; do
    for command in "prettier" "lint" "test"; do
        run_command "${app}" "${command}"
    done
done
